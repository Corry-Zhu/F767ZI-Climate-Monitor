
i2c_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f10  08002f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f18  08002f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002f2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002f2c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3f2  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b5e  00000000  00000000  0002b42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002cf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a58  00000000  00000000  0002e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d2e  00000000  00000000  00053d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8cc9  00000000  00000000  0005da2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001466f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  00146774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002ed0 	.word	0x08002ed0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002ed0 	.word	0x08002ed0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f90b 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f002 fb76 	bl	8002c38 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f917 	bl	80007a6 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f8ed 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	2000002c 	.word	0x2000002c

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000002c 	.word	0x2000002c

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	4313      	orrs	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	05fa0000 	.word	0x05fa0000

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff47 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff5c 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb0 	bl	8000714 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	e175      	b.n	8000acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007e0:	2201      	movs	r2, #1
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f040 8164 	bne.w	8000ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b12      	cmp	r3, #18
 800080c:	d123      	bne.n	8000856 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	08da      	lsrs	r2, r3, #3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3208      	adds	r2, #8
 8000816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	220f      	movs	r2, #15
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4013      	ands	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	691a      	ldr	r2, [r3, #16]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4313      	orrs	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	08da      	lsrs	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	69b9      	ldr	r1, [r7, #24]
 8000852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2203      	movs	r2, #3
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 0203 	and.w	r2, r3, #3
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d00b      	beq.n	80008aa <HAL_GPIO_Init+0xea>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d007      	beq.n	80008aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089e:	2b11      	cmp	r3, #17
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b12      	cmp	r3, #18
 80008a8:	d130      	bne.n	800090c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68da      	ldr	r2, [r3, #12]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e0:	2201      	movs	r2, #1
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 80be 	beq.w	8000ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b65      	ldr	r3, [pc, #404]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a64      	ldr	r2, [pc, #400]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b62      	ldr	r3, [pc, #392]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000962:	4a60      	ldr	r2, [pc, #384]	; (8000ae4 <HAL_GPIO_Init+0x324>)
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_GPIO_Init+0x328>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d037      	beq.n	80009fe <HAL_GPIO_Init+0x23e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a56      	ldr	r2, [pc, #344]	; (8000aec <HAL_GPIO_Init+0x32c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d031      	beq.n	80009fa <HAL_GPIO_Init+0x23a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <HAL_GPIO_Init+0x330>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d02b      	beq.n	80009f6 <HAL_GPIO_Init+0x236>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <HAL_GPIO_Init+0x334>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d025      	beq.n	80009f2 <HAL_GPIO_Init+0x232>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a53      	ldr	r2, [pc, #332]	; (8000af8 <HAL_GPIO_Init+0x338>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d01f      	beq.n	80009ee <HAL_GPIO_Init+0x22e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a52      	ldr	r2, [pc, #328]	; (8000afc <HAL_GPIO_Init+0x33c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d019      	beq.n	80009ea <HAL_GPIO_Init+0x22a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_GPIO_Init+0x340>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0x226>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a50      	ldr	r2, [pc, #320]	; (8000b04 <HAL_GPIO_Init+0x344>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00d      	beq.n	80009e2 <HAL_GPIO_Init+0x222>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4f      	ldr	r2, [pc, #316]	; (8000b08 <HAL_GPIO_Init+0x348>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0x21e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_Init+0x21a>
 80009d6:	2309      	movs	r3, #9
 80009d8:	e012      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009da:	230a      	movs	r3, #10
 80009dc:	e010      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009de:	2308      	movs	r3, #8
 80009e0:	e00e      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009e2:	2307      	movs	r3, #7
 80009e4:	e00c      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009e6:	2306      	movs	r3, #6
 80009e8:	e00a      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009ea:	2305      	movs	r3, #5
 80009ec:	e008      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009ee:	2304      	movs	r3, #4
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009f2:	2303      	movs	r3, #3
 80009f4:	e004      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009fe:	2300      	movs	r3, #0
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	f002 0203 	and.w	r2, r2, #3
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a10:	4934      	ldr	r1, [pc, #208]	; (8000ae4 <HAL_GPIO_Init+0x324>)
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a42:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a48:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a96:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	f67f ae86 	bls.w	80007e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40021400 	.word	0x40021400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40021c00 	.word	0x40021c00
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	40022400 	.word	0x40022400
 8000b10:	40013c00 	.word	0x40013c00

08000b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b24:	787b      	ldrb	r3, [r7, #1]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000b30:	e003      	b.n	8000b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	041a      	lsls	r2, r3, #16
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	619a      	str	r2, [r3, #24]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	401a      	ands	r2, r3
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d104      	bne.n	8000b6a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	041a      	lsls	r2, r3, #16
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b68:	e002      	b.n	8000b70 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e07f      	b.n	8000c8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d106      	bne.n	8000ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f001 ff18 	bl	80029d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2224      	movs	r2, #36	; 0x24
 8000bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0201 	bic.w	r2, r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d107      	bne.n	8000bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	e006      	b.n	8000c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d104      	bne.n	8000c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6859      	ldr	r1, [r3, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <HAL_I2C_Init+0x11c>)
 8000c22:	430b      	orrs	r3, r1
 8000c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	ea42 0103 	orr.w	r1, r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	021a      	lsls	r2, r3, #8
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69d9      	ldr	r1, [r3, #28]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a1a      	ldr	r2, [r3, #32]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 0201 	orr.w	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2220      	movs	r2, #32
 8000c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	02008000 	.word	0x02008000

08000c9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d138      	bne.n	8000d24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d101      	bne.n	8000cc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e032      	b.n	8000d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2224      	movs	r2, #36	; 0x24
 8000ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6819      	ldr	r1, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2220      	movs	r2, #32
 8000d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e000      	b.n	8000d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d24:	2302      	movs	r3, #2
  }
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	d139      	bne.n	8000dbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e033      	b.n	8000dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2224      	movs	r2, #36	; 0x24
 8000d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0201 	bic.w	r2, r2, #1
 8000d74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0201 	orr.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e000      	b.n	8000dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000dbc:	2302      	movs	r3, #2
  }
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <HAL_PWREx_EnableOverDrive+0x98>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <HAL_PWREx_EnableOverDrive+0x98>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_PWREx_EnableOverDrive+0x98>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfa:	f7ff fbef 	bl	80005dc <HAL_GetTick>
 8000dfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e00:	e009      	b.n	8000e16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e02:	f7ff fbeb 	bl	80005dc <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e10:	d901      	bls.n	8000e16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e022      	b.n	8000e5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e22:	d1ee      	bne.n	8000e02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e30:	f7ff fbd4 	bl	80005dc <HAL_GetTick>
 8000e34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e36:	e009      	b.n	8000e4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e38:	f7ff fbd0 	bl	80005dc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e46:	d901      	bls.n	8000e4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e007      	b.n	8000e5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e58:	d1ee      	bne.n	8000e38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e25e      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8087 	beq.w	8000f9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e90:	4b96      	ldr	r3, [pc, #600]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e9c:	4b93      	ldr	r3, [pc, #588]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d112      	bne.n	8000ece <HAL_RCC_OscConfig+0x62>
 8000ea8:	4b90      	ldr	r3, [pc, #576]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eb4:	d10b      	bne.n	8000ece <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b8d      	ldr	r3, [pc, #564]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d06c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x130>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d168      	bne.n	8000f9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e238      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x7a>
 8000ed8:	4b84      	ldr	r3, [pc, #528]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a83      	ldr	r2, [pc, #524]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e02e      	b.n	8000f44 <HAL_RCC_OscConfig+0xd8>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x9c>
 8000eee:	4b7f      	ldr	r3, [pc, #508]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7e      	ldr	r2, [pc, #504]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b7c      	ldr	r3, [pc, #496]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a7b      	ldr	r2, [pc, #492]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xd8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0xc0>
 8000f12:	4b76      	ldr	r3, [pc, #472]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a75      	ldr	r2, [pc, #468]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b73      	ldr	r3, [pc, #460]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a72      	ldr	r2, [pc, #456]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xd8>
 8000f2c:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a6e      	ldr	r2, [pc, #440]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b6c      	ldr	r3, [pc, #432]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a6b      	ldr	r2, [pc, #428]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fb46 	bl	80005dc <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fb42 	bl	80005dc <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1ec      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b61      	ldr	r3, [pc, #388]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe8>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f74:	f7ff fb32 	bl	80005dc <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fb2e 	bl	80005dc <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1d8      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x110>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d069      	beq.n	800107e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb6:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x190>
 8000fc2:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x17a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1ac      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b41      	ldr	r3, [pc, #260]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	493d      	ldr	r1, [pc, #244]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e040      	b.n	800107e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d023      	beq.n	800104c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b39      	ldr	r3, [pc, #228]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fae4 	bl	80005dc <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fae0 	bl	80005dc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e18a      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4929      	ldr	r1, [pc, #164]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
 800104a:	e018      	b.n	800107e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001058:	f7ff fac0 	bl	80005dc <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001060:	f7ff fabc 	bl	80005dc <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e166      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d038      	beq.n	80010fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d019      	beq.n	80010c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8001094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001096:	4a15      	ldr	r2, [pc, #84]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff fa9d 	bl	80005dc <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a6:	f7ff fa99 	bl	80005dc <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e143      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 80010ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x23a>
 80010c4:	e01a      	b.n	80010fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 80010c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_RCC_OscConfig+0x280>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d2:	f7ff fa83 	bl	80005dc <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010da:	f7ff fa7f 	bl	80005dc <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d903      	bls.n	80010f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e129      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
 80010ec:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	4b95      	ldr	r3, [pc, #596]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80010f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1ee      	bne.n	80010da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a4 	beq.w	8001252 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110a:	4b8f      	ldr	r3, [pc, #572]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b8c      	ldr	r3, [pc, #560]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a8b      	ldr	r2, [pc, #556]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800112e:	2301      	movs	r3, #1
 8001130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001132:	4b86      	ldr	r3, [pc, #536]	; (800134c <HAL_RCC_OscConfig+0x4e0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800113e:	4b83      	ldr	r3, [pc, #524]	; (800134c <HAL_RCC_OscConfig+0x4e0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a82      	ldr	r2, [pc, #520]	; (800134c <HAL_RCC_OscConfig+0x4e0>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114a:	f7ff fa47 	bl	80005dc <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001152:	f7ff fa43 	bl	80005dc <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e0ed      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001164:	4b79      	ldr	r3, [pc, #484]	; (800134c <HAL_RCC_OscConfig+0x4e0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x31a>
 8001178:	4b73      	ldr	r3, [pc, #460]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117c:	4a72      	ldr	r2, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6713      	str	r3, [r2, #112]	; 0x70
 8001184:	e02d      	b.n	80011e2 <HAL_RCC_OscConfig+0x376>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x33c>
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001192:	4a6d      	ldr	r2, [pc, #436]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	6713      	str	r3, [r2, #112]	; 0x70
 800119a:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119e:	4a6a      	ldr	r2, [pc, #424]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	6713      	str	r3, [r2, #112]	; 0x70
 80011a6:	e01c      	b.n	80011e2 <HAL_RCC_OscConfig+0x376>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0x35e>
 80011b0:	4b65      	ldr	r3, [pc, #404]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b4:	4a64      	ldr	r2, [pc, #400]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6713      	str	r3, [r2, #112]	; 0x70
 80011bc:	4b62      	ldr	r3, [pc, #392]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c0:	4a61      	ldr	r2, [pc, #388]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6713      	str	r3, [r2, #112]	; 0x70
 80011c8:	e00b      	b.n	80011e2 <HAL_RCC_OscConfig+0x376>
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6713      	str	r3, [r2, #112]	; 0x70
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	4a5b      	ldr	r2, [pc, #364]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80011dc:	f023 0304 	bic.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d015      	beq.n	8001216 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff f9f7 	bl	80005dc <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff f9f3 	bl	80005dc <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e09b      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800120a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ee      	beq.n	80011f2 <HAL_RCC_OscConfig+0x386>
 8001214:	e014      	b.n	8001240 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001216:	f7ff f9e1 	bl	80005dc <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff f9dd 	bl	80005dc <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e085      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1ee      	bne.n	800121e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d105      	bne.n	8001252 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800124c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d071      	beq.n	800133e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b08      	cmp	r3, #8
 8001264:	d069      	beq.n	800133a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d14b      	bne.n	8001306 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a35      	ldr	r2, [pc, #212]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff f9af 	bl	80005dc <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff f9ab 	bl	80005dc <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e055      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	019b      	lsls	r3, r3, #6
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	3b01      	subs	r3, #1
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	061b      	lsls	r3, r3, #24
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	071b      	lsls	r3, r3, #28
 80012cc:	491e      	ldr	r1, [pc, #120]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80012d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff f97d 	bl	80005dc <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff f979 	bl	80005dc <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e023      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x47a>
 8001304:	e01b      	b.n	800133e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800130c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff f963 	bl	80005dc <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff f95f 	bl	80005dc <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e009      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_RCC_OscConfig+0x4dc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0x4ae>
 8001338:	e001      	b.n	800133e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0ce      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001368:	4b69      	ldr	r3, [pc, #420]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d910      	bls.n	8001398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 020f 	bic.w	r2, r3, #15
 800137e:	4964      	ldr	r1, [pc, #400]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b62      	ldr	r3, [pc, #392]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0b6      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c8:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	494c      	ldr	r1, [pc, #304]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d040      	beq.n	8001474 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d115      	bne.n	8001432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e07d      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d109      	bne.n	8001432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e071      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e069      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f023 0203 	bic.w	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001444:	f7ff f8ca 	bl	80005dc <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144a:	e00a      	b.n	8001462 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144c:	f7ff f8c6 	bl	80005dc <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e051      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 020c 	and.w	r2, r3, #12
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	429a      	cmp	r2, r3
 8001472:	d1eb      	bne.n	800144c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d210      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 020f 	bic.w	r2, r3, #15
 800148a:	4921      	ldr	r1, [pc, #132]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e030      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4915      	ldr	r1, [pc, #84]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	490d      	ldr	r1, [pc, #52]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014e2:	f000 f81d 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 80014e6:	4601      	mov	r1, r0
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_RCC_ClockConfig+0x1c8>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	fa21 f303 	lsr.w	r3, r1, r3
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_RCC_ClockConfig+0x1cc>)
 80014fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff f828 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023c00 	.word	0x40023c00
 8001514:	40023800 	.word	0x40023800
 8001518:	08002ef8 	.word	0x08002ef8
 800151c:	20000008 	.word	0x20000008

08001520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001536:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d007      	beq.n	8001552 <HAL_RCC_GetSysClockFreq+0x32>
 8001542:	2b08      	cmp	r3, #8
 8001544:	d008      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x38>
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 80b4 	bne.w	80016b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800154e:	60bb      	str	r3, [r7, #8]
       break;
 8001550:	e0b3      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001552:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001554:	60bb      	str	r3, [r7, #8]
      break;
 8001556:	e0b0      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001558:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001560:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001562:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d04a      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	099b      	lsrs	r3, r3, #6
 8001574:	f04f 0400 	mov.w	r4, #0
 8001578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	ea03 0501 	and.w	r5, r3, r1
 8001584:	ea04 0602 	and.w	r6, r4, r2
 8001588:	4629      	mov	r1, r5
 800158a:	4632      	mov	r2, r6
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f04f 0400 	mov.w	r4, #0
 8001594:	0154      	lsls	r4, r2, #5
 8001596:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800159a:	014b      	lsls	r3, r1, #5
 800159c:	4619      	mov	r1, r3
 800159e:	4622      	mov	r2, r4
 80015a0:	1b49      	subs	r1, r1, r5
 80015a2:	eb62 0206 	sbc.w	r2, r2, r6
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	f04f 0400 	mov.w	r4, #0
 80015ae:	0194      	lsls	r4, r2, #6
 80015b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015b4:	018b      	lsls	r3, r1, #6
 80015b6:	1a5b      	subs	r3, r3, r1
 80015b8:	eb64 0402 	sbc.w	r4, r4, r2
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	00e2      	lsls	r2, r4, #3
 80015c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015ca:	00d9      	lsls	r1, r3, #3
 80015cc:	460b      	mov	r3, r1
 80015ce:	4614      	mov	r4, r2
 80015d0:	195b      	adds	r3, r3, r5
 80015d2:	eb44 0406 	adc.w	r4, r4, r6
 80015d6:	f04f 0100 	mov.w	r1, #0
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	0262      	lsls	r2, r4, #9
 80015e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80015e4:	0259      	lsls	r1, r3, #9
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	4621      	mov	r1, r4
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f04f 0400 	mov.w	r4, #0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	f7fe fe1e 	bl	8000238 <__aeabi_uldivmod>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e049      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	f04f 0400 	mov.w	r4, #0
 800160e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	ea03 0501 	and.w	r5, r3, r1
 800161a:	ea04 0602 	and.w	r6, r4, r2
 800161e:	4629      	mov	r1, r5
 8001620:	4632      	mov	r2, r6
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	f04f 0400 	mov.w	r4, #0
 800162a:	0154      	lsls	r4, r2, #5
 800162c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001630:	014b      	lsls	r3, r1, #5
 8001632:	4619      	mov	r1, r3
 8001634:	4622      	mov	r2, r4
 8001636:	1b49      	subs	r1, r1, r5
 8001638:	eb62 0206 	sbc.w	r2, r2, r6
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	f04f 0400 	mov.w	r4, #0
 8001644:	0194      	lsls	r4, r2, #6
 8001646:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800164a:	018b      	lsls	r3, r1, #6
 800164c:	1a5b      	subs	r3, r3, r1
 800164e:	eb64 0402 	sbc.w	r4, r4, r2
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	00e2      	lsls	r2, r4, #3
 800165c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001660:	00d9      	lsls	r1, r3, #3
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	195b      	adds	r3, r3, r5
 8001668:	eb44 0406 	adc.w	r4, r4, r6
 800166c:	f04f 0100 	mov.w	r1, #0
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	02a2      	lsls	r2, r4, #10
 8001676:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800167a:	0299      	lsls	r1, r3, #10
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f04f 0400 	mov.w	r4, #0
 800168a:	461a      	mov	r2, r3
 800168c:	4623      	mov	r3, r4
 800168e:	f7fe fdd3 	bl	8000238 <__aeabi_uldivmod>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	3301      	adds	r3, #1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	60bb      	str	r3, [r7, #8]
      break;
 80016b2:	e002      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016b6:	60bb      	str	r3, [r7, #8]
      break;
 80016b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ba:	68bb      	ldr	r3, [r7, #8]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	007a1200 	.word	0x007a1200

080016d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff0 	bl	80016d0 <HAL_RCC_GetHCLKFreq>
 80016f0:	4601      	mov	r1, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0a9b      	lsrs	r3, r3, #10
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5cd3      	ldrb	r3, [r2, r3]
 8001700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	08002f08 	.word	0x08002f08

08001710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001714:	f7ff ffdc 	bl	80016d0 <HAL_RCC_GetHCLKFreq>
 8001718:	4601      	mov	r1, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	0b5b      	lsrs	r3, r3, #13
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4a03      	ldr	r2, [pc, #12]	; (8001734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	fa21 f303 	lsr.w	r3, r1, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	08002f08 	.word	0x08002f08

08001738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d012      	beq.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001760:	4b69      	ldr	r3, [pc, #420]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a68      	ldr	r2, [pc, #416]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001766:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800176a:	6093      	str	r3, [r2, #8]
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	4964      	ldr	r1, [pc, #400]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d017      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	4959      	ldr	r1, [pc, #356]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017b0:	d101      	bne.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d017      	beq.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	494a      	ldr	r1, [pc, #296]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ec:	d101      	bne.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 808b 	beq.w	8001932 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a39      	ldr	r2, [pc, #228]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
 8001828:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a34      	ldr	r2, [pc, #208]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001840:	f7fe fecc 	bl	80005dc <HAL_GetTick>
 8001844:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001848:	f7fe fec8 	bl	80005dc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e38d      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800186e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d035      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d02e      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800188c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d114      	bne.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7fe fe90 	bl	80005dc <HAL_GetTick>
 80018bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	e00a      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7fe fe8c 	bl	80005dc <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e34f      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0ee      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018ee:	d111      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80018fe:	400b      	ands	r3, r1
 8001900:	4901      	ldr	r1, [pc, #4]	; (8001908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
 8001906:	e00b      	b.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000
 8001910:	0ffffcff 	.word	0x0ffffcff
 8001914:	4bb3      	ldr	r3, [pc, #716]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4ab2      	ldr	r2, [pc, #712]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800191a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800191e:	6093      	str	r3, [r2, #8]
 8001920:	4bb0      	ldr	r3, [pc, #704]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192c:	49ad      	ldr	r1, [pc, #692]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800192e:	4313      	orrs	r3, r2
 8001930:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800193e:	4ba9      	ldr	r3, [pc, #676]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001944:	4aa7      	ldr	r2, [pc, #668]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800194e:	4ba5      	ldr	r3, [pc, #660]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001950:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001958:	49a2      	ldr	r1, [pc, #648]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800195a:	4313      	orrs	r3, r2
 800195c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00a      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800196c:	4b9d      	ldr	r3, [pc, #628]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800197a:	499a      	ldr	r1, [pc, #616]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800197c:	4313      	orrs	r3, r2
 800197e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800198e:	4b95      	ldr	r3, [pc, #596]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800199c:	4991      	ldr	r1, [pc, #580]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80019b0:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019be:	4989      	ldr	r1, [pc, #548]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019d2:	4b84      	ldr	r3, [pc, #528]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4980      	ldr	r1, [pc, #512]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00a      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019f4:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4978      	ldr	r1, [pc, #480]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a16:	4b73      	ldr	r3, [pc, #460]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	f023 020c 	bic.w	r2, r3, #12
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a24:	496f      	ldr	r1, [pc, #444]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4967      	ldr	r1, [pc, #412]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a5a:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a68:	495e      	ldr	r1, [pc, #376]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8a:	4956      	ldr	r1, [pc, #344]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a9e:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	494d      	ldr	r1, [pc, #308]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ac0:	4b48      	ldr	r3, [pc, #288]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	4945      	ldr	r1, [pc, #276]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ae2:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	493c      	ldr	r1, [pc, #240]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b12:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d011      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b34:	492b      	ldr	r1, [pc, #172]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b44:	d101      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b74:	491b      	ldr	r1, [pc, #108]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b98:	4912      	ldr	r1, [pc, #72]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bbc:	4909      	ldr	r1, [pc, #36]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00f      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be0:	e002      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	4985      	ldr	r1, [pc, #532]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00b      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001bfc:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c0c:	497c      	ldr	r1, [pc, #496]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c22:	f040 80d6 	bne.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c32:	f7fe fcd3 	bl	80005dc <HAL_GetTick>
 8001c36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c3a:	f7fe fccf 	bl	80005dc <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	; 0x64
 8001c46:	d901      	bls.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e194      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d021      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11d      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c7a:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c80:	0e1b      	lsrs	r3, r3, #24
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	019a      	lsls	r2, r3, #6
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	071b      	lsls	r3, r3, #28
 8001ca0:	4957      	ldr	r1, [pc, #348]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d02e      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd2:	d129      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cd4:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cda:	0c1b      	lsrs	r3, r3, #16
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ce8:	0f1b      	lsrs	r3, r3, #28
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	019a      	lsls	r2, r3, #6
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	431a      	orrs	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	071b      	lsls	r3, r3, #28
 8001d08:	493d      	ldr	r1, [pc, #244]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d16:	f023 021f 	bic.w	r2, r3, #31
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4937      	ldr	r1, [pc, #220]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01d      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3a:	0e1b      	lsrs	r3, r3, #24
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d48:	0f1b      	lsrs	r3, r3, #28
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	019a      	lsls	r2, r3, #6
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	431a      	orrs	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	071b      	lsls	r3, r3, #28
 8001d68:	4925      	ldr	r1, [pc, #148]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d011      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	019a      	lsls	r2, r3, #6
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	061b      	lsls	r3, r3, #24
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	071b      	lsls	r3, r3, #28
 8001d98:	4919      	ldr	r1, [pc, #100]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001da6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7fe fc16 	bl	80005dc <HAL_GetTick>
 8001db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001db4:	f7fe fc12 	bl	80005dc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0d7      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 80cd 	bne.w	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de6:	f7fe fbf9 	bl	80005dc <HAL_GetTick>
 8001dea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dee:	f7fe fbf5 	bl	80005dc <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d903      	bls.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0ba      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001e00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e04:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e10:	d0ed      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d02e      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d12a      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e3a:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e48:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	0f1b      	lsrs	r3, r3, #28
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	019a      	lsls	r2, r3, #6
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	061b      	lsls	r3, r3, #24
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	071b      	lsls	r3, r3, #28
 8001e6e:	4944      	ldr	r1, [pc, #272]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e76:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	493d      	ldr	r1, [pc, #244]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d022      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ea4:	d11d      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ea6:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	0e1b      	lsrs	r3, r3, #24
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001eb4:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	0f1b      	lsrs	r3, r3, #28
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	019a      	lsls	r2, r3, #6
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	061b      	lsls	r3, r3, #24
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	071b      	lsls	r3, r3, #28
 8001eda:	4929      	ldr	r1, [pc, #164]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d028      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef4:	0e1b      	lsrs	r3, r3, #24
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	0c1b      	lsrs	r3, r3, #16
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	019a      	lsls	r2, r3, #6
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	071b      	lsls	r3, r3, #28
 8001f22:	4917      	ldr	r1, [pc, #92]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	4911      	ldr	r1, [pc, #68]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fb46 	bl	80005dc <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f54:	f7fe fb42 	bl	80005dc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e007      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f72:	d1ef      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e040      	b.n	8002018 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fef8 	bl	8002d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8be 	bl	8002144 <UART_SetConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e022      	b.n	8002018 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fb56 	bl	800268c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ffe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fbdd 	bl	80027d0 <UART_CheckIdleState>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002034:	2b20      	cmp	r3, #32
 8002036:	d17f      	bne.n	8002138 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_UART_Transmit+0x24>
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e078      	b.n	800213a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_UART_Transmit+0x36>
 8002052:	2302      	movs	r3, #2
 8002054:	e071      	b.n	800213a <HAL_UART_Transmit+0x11a>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2221      	movs	r2, #33	; 0x21
 8002068:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800206a:	f7fe fab7 	bl	80005dc <HAL_GetTick>
 800206e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	88fa      	ldrh	r2, [r7, #6]
 800207c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002088:	d108      	bne.n	800209c <HAL_UART_Transmit+0x7c>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	e003      	b.n	80020a4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020a4:	e02c      	b.n	8002100 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fbbc 	bl	800282e <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e03c      	b.n	800213a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10b      	bne.n	80020de <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3302      	adds	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e007      	b.n	80020ee <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3301      	adds	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1cc      	bne.n	80020a6 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2200      	movs	r2, #0
 8002114:	2140      	movs	r1, #64	; 0x40
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fb89 	bl	800282e <UART_WaitOnFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e009      	b.n	800213a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4bb1      	ldr	r3, [pc, #708]	; (8002438 <UART_SetConfig+0x2f4>)
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	6939      	ldr	r1, [r7, #16]
 800217c:	430b      	orrs	r3, r1
 800217e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a9f      	ldr	r2, [pc, #636]	; (800243c <UART_SetConfig+0x2f8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d121      	bne.n	8002208 <UART_SetConfig+0xc4>
 80021c4:	4b9e      	ldr	r3, [pc, #632]	; (8002440 <UART_SetConfig+0x2fc>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d816      	bhi.n	8002200 <UART_SetConfig+0xbc>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <UART_SetConfig+0x94>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021f5 	.word	0x080021f5
 80021e0:	080021ef 	.word	0x080021ef
 80021e4:	080021fb 	.word	0x080021fb
 80021e8:	2301      	movs	r3, #1
 80021ea:	77fb      	strb	r3, [r7, #31]
 80021ec:	e151      	b.n	8002492 <UART_SetConfig+0x34e>
 80021ee:	2302      	movs	r3, #2
 80021f0:	77fb      	strb	r3, [r7, #31]
 80021f2:	e14e      	b.n	8002492 <UART_SetConfig+0x34e>
 80021f4:	2304      	movs	r3, #4
 80021f6:	77fb      	strb	r3, [r7, #31]
 80021f8:	e14b      	b.n	8002492 <UART_SetConfig+0x34e>
 80021fa:	2308      	movs	r3, #8
 80021fc:	77fb      	strb	r3, [r7, #31]
 80021fe:	e148      	b.n	8002492 <UART_SetConfig+0x34e>
 8002200:	2310      	movs	r3, #16
 8002202:	77fb      	strb	r3, [r7, #31]
 8002204:	bf00      	nop
 8002206:	e144      	b.n	8002492 <UART_SetConfig+0x34e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a8d      	ldr	r2, [pc, #564]	; (8002444 <UART_SetConfig+0x300>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d134      	bne.n	800227c <UART_SetConfig+0x138>
 8002212:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <UART_SetConfig+0x2fc>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b0c      	cmp	r3, #12
 800221e:	d829      	bhi.n	8002274 <UART_SetConfig+0x130>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <UART_SetConfig+0xe4>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	0800225d 	.word	0x0800225d
 800222c:	08002275 	.word	0x08002275
 8002230:	08002275 	.word	0x08002275
 8002234:	08002275 	.word	0x08002275
 8002238:	08002269 	.word	0x08002269
 800223c:	08002275 	.word	0x08002275
 8002240:	08002275 	.word	0x08002275
 8002244:	08002275 	.word	0x08002275
 8002248:	08002263 	.word	0x08002263
 800224c:	08002275 	.word	0x08002275
 8002250:	08002275 	.word	0x08002275
 8002254:	08002275 	.word	0x08002275
 8002258:	0800226f 	.word	0x0800226f
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
 8002260:	e117      	b.n	8002492 <UART_SetConfig+0x34e>
 8002262:	2302      	movs	r3, #2
 8002264:	77fb      	strb	r3, [r7, #31]
 8002266:	e114      	b.n	8002492 <UART_SetConfig+0x34e>
 8002268:	2304      	movs	r3, #4
 800226a:	77fb      	strb	r3, [r7, #31]
 800226c:	e111      	b.n	8002492 <UART_SetConfig+0x34e>
 800226e:	2308      	movs	r3, #8
 8002270:	77fb      	strb	r3, [r7, #31]
 8002272:	e10e      	b.n	8002492 <UART_SetConfig+0x34e>
 8002274:	2310      	movs	r3, #16
 8002276:	77fb      	strb	r3, [r7, #31]
 8002278:	bf00      	nop
 800227a:	e10a      	b.n	8002492 <UART_SetConfig+0x34e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a71      	ldr	r2, [pc, #452]	; (8002448 <UART_SetConfig+0x304>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d120      	bne.n	80022c8 <UART_SetConfig+0x184>
 8002286:	4b6e      	ldr	r3, [pc, #440]	; (8002440 <UART_SetConfig+0x2fc>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002290:	2b10      	cmp	r3, #16
 8002292:	d00f      	beq.n	80022b4 <UART_SetConfig+0x170>
 8002294:	2b10      	cmp	r3, #16
 8002296:	d802      	bhi.n	800229e <UART_SetConfig+0x15a>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <UART_SetConfig+0x164>
 800229c:	e010      	b.n	80022c0 <UART_SetConfig+0x17c>
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d005      	beq.n	80022ae <UART_SetConfig+0x16a>
 80022a2:	2b30      	cmp	r3, #48	; 0x30
 80022a4:	d009      	beq.n	80022ba <UART_SetConfig+0x176>
 80022a6:	e00b      	b.n	80022c0 <UART_SetConfig+0x17c>
 80022a8:	2300      	movs	r3, #0
 80022aa:	77fb      	strb	r3, [r7, #31]
 80022ac:	e0f1      	b.n	8002492 <UART_SetConfig+0x34e>
 80022ae:	2302      	movs	r3, #2
 80022b0:	77fb      	strb	r3, [r7, #31]
 80022b2:	e0ee      	b.n	8002492 <UART_SetConfig+0x34e>
 80022b4:	2304      	movs	r3, #4
 80022b6:	77fb      	strb	r3, [r7, #31]
 80022b8:	e0eb      	b.n	8002492 <UART_SetConfig+0x34e>
 80022ba:	2308      	movs	r3, #8
 80022bc:	77fb      	strb	r3, [r7, #31]
 80022be:	e0e8      	b.n	8002492 <UART_SetConfig+0x34e>
 80022c0:	2310      	movs	r3, #16
 80022c2:	77fb      	strb	r3, [r7, #31]
 80022c4:	bf00      	nop
 80022c6:	e0e4      	b.n	8002492 <UART_SetConfig+0x34e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a5f      	ldr	r2, [pc, #380]	; (800244c <UART_SetConfig+0x308>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d120      	bne.n	8002314 <UART_SetConfig+0x1d0>
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <UART_SetConfig+0x2fc>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d00f      	beq.n	8002300 <UART_SetConfig+0x1bc>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d802      	bhi.n	80022ea <UART_SetConfig+0x1a6>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <UART_SetConfig+0x1b0>
 80022e8:	e010      	b.n	800230c <UART_SetConfig+0x1c8>
 80022ea:	2b80      	cmp	r3, #128	; 0x80
 80022ec:	d005      	beq.n	80022fa <UART_SetConfig+0x1b6>
 80022ee:	2bc0      	cmp	r3, #192	; 0xc0
 80022f0:	d009      	beq.n	8002306 <UART_SetConfig+0x1c2>
 80022f2:	e00b      	b.n	800230c <UART_SetConfig+0x1c8>
 80022f4:	2300      	movs	r3, #0
 80022f6:	77fb      	strb	r3, [r7, #31]
 80022f8:	e0cb      	b.n	8002492 <UART_SetConfig+0x34e>
 80022fa:	2302      	movs	r3, #2
 80022fc:	77fb      	strb	r3, [r7, #31]
 80022fe:	e0c8      	b.n	8002492 <UART_SetConfig+0x34e>
 8002300:	2304      	movs	r3, #4
 8002302:	77fb      	strb	r3, [r7, #31]
 8002304:	e0c5      	b.n	8002492 <UART_SetConfig+0x34e>
 8002306:	2308      	movs	r3, #8
 8002308:	77fb      	strb	r3, [r7, #31]
 800230a:	e0c2      	b.n	8002492 <UART_SetConfig+0x34e>
 800230c:	2310      	movs	r3, #16
 800230e:	77fb      	strb	r3, [r7, #31]
 8002310:	bf00      	nop
 8002312:	e0be      	b.n	8002492 <UART_SetConfig+0x34e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <UART_SetConfig+0x30c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d124      	bne.n	8002368 <UART_SetConfig+0x224>
 800231e:	4b48      	ldr	r3, [pc, #288]	; (8002440 <UART_SetConfig+0x2fc>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232c:	d012      	beq.n	8002354 <UART_SetConfig+0x210>
 800232e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002332:	d802      	bhi.n	800233a <UART_SetConfig+0x1f6>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <UART_SetConfig+0x204>
 8002338:	e012      	b.n	8002360 <UART_SetConfig+0x21c>
 800233a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233e:	d006      	beq.n	800234e <UART_SetConfig+0x20a>
 8002340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002344:	d009      	beq.n	800235a <UART_SetConfig+0x216>
 8002346:	e00b      	b.n	8002360 <UART_SetConfig+0x21c>
 8002348:	2300      	movs	r3, #0
 800234a:	77fb      	strb	r3, [r7, #31]
 800234c:	e0a1      	b.n	8002492 <UART_SetConfig+0x34e>
 800234e:	2302      	movs	r3, #2
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	e09e      	b.n	8002492 <UART_SetConfig+0x34e>
 8002354:	2304      	movs	r3, #4
 8002356:	77fb      	strb	r3, [r7, #31]
 8002358:	e09b      	b.n	8002492 <UART_SetConfig+0x34e>
 800235a:	2308      	movs	r3, #8
 800235c:	77fb      	strb	r3, [r7, #31]
 800235e:	e098      	b.n	8002492 <UART_SetConfig+0x34e>
 8002360:	2310      	movs	r3, #16
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	bf00      	nop
 8002366:	e094      	b.n	8002492 <UART_SetConfig+0x34e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a39      	ldr	r2, [pc, #228]	; (8002454 <UART_SetConfig+0x310>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d124      	bne.n	80023bc <UART_SetConfig+0x278>
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <UART_SetConfig+0x2fc>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002380:	d012      	beq.n	80023a8 <UART_SetConfig+0x264>
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002386:	d802      	bhi.n	800238e <UART_SetConfig+0x24a>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <UART_SetConfig+0x258>
 800238c:	e012      	b.n	80023b4 <UART_SetConfig+0x270>
 800238e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002392:	d006      	beq.n	80023a2 <UART_SetConfig+0x25e>
 8002394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002398:	d009      	beq.n	80023ae <UART_SetConfig+0x26a>
 800239a:	e00b      	b.n	80023b4 <UART_SetConfig+0x270>
 800239c:	2301      	movs	r3, #1
 800239e:	77fb      	strb	r3, [r7, #31]
 80023a0:	e077      	b.n	8002492 <UART_SetConfig+0x34e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	77fb      	strb	r3, [r7, #31]
 80023a6:	e074      	b.n	8002492 <UART_SetConfig+0x34e>
 80023a8:	2304      	movs	r3, #4
 80023aa:	77fb      	strb	r3, [r7, #31]
 80023ac:	e071      	b.n	8002492 <UART_SetConfig+0x34e>
 80023ae:	2308      	movs	r3, #8
 80023b0:	77fb      	strb	r3, [r7, #31]
 80023b2:	e06e      	b.n	8002492 <UART_SetConfig+0x34e>
 80023b4:	2310      	movs	r3, #16
 80023b6:	77fb      	strb	r3, [r7, #31]
 80023b8:	bf00      	nop
 80023ba:	e06a      	b.n	8002492 <UART_SetConfig+0x34e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a25      	ldr	r2, [pc, #148]	; (8002458 <UART_SetConfig+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d124      	bne.n	8002410 <UART_SetConfig+0x2cc>
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <UART_SetConfig+0x2fc>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80023d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d4:	d012      	beq.n	80023fc <UART_SetConfig+0x2b8>
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023da:	d802      	bhi.n	80023e2 <UART_SetConfig+0x29e>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <UART_SetConfig+0x2ac>
 80023e0:	e012      	b.n	8002408 <UART_SetConfig+0x2c4>
 80023e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e6:	d006      	beq.n	80023f6 <UART_SetConfig+0x2b2>
 80023e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023ec:	d009      	beq.n	8002402 <UART_SetConfig+0x2be>
 80023ee:	e00b      	b.n	8002408 <UART_SetConfig+0x2c4>
 80023f0:	2300      	movs	r3, #0
 80023f2:	77fb      	strb	r3, [r7, #31]
 80023f4:	e04d      	b.n	8002492 <UART_SetConfig+0x34e>
 80023f6:	2302      	movs	r3, #2
 80023f8:	77fb      	strb	r3, [r7, #31]
 80023fa:	e04a      	b.n	8002492 <UART_SetConfig+0x34e>
 80023fc:	2304      	movs	r3, #4
 80023fe:	77fb      	strb	r3, [r7, #31]
 8002400:	e047      	b.n	8002492 <UART_SetConfig+0x34e>
 8002402:	2308      	movs	r3, #8
 8002404:	77fb      	strb	r3, [r7, #31]
 8002406:	e044      	b.n	8002492 <UART_SetConfig+0x34e>
 8002408:	2310      	movs	r3, #16
 800240a:	77fb      	strb	r3, [r7, #31]
 800240c:	bf00      	nop
 800240e:	e040      	b.n	8002492 <UART_SetConfig+0x34e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <UART_SetConfig+0x318>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d139      	bne.n	800248e <UART_SetConfig+0x34a>
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <UART_SetConfig+0x2fc>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002428:	d027      	beq.n	800247a <UART_SetConfig+0x336>
 800242a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800242e:	d817      	bhi.n	8002460 <UART_SetConfig+0x31c>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01c      	beq.n	800246e <UART_SetConfig+0x32a>
 8002434:	e027      	b.n	8002486 <UART_SetConfig+0x342>
 8002436:	bf00      	nop
 8002438:	efff69f3 	.word	0xefff69f3
 800243c:	40011000 	.word	0x40011000
 8002440:	40023800 	.word	0x40023800
 8002444:	40004400 	.word	0x40004400
 8002448:	40004800 	.word	0x40004800
 800244c:	40004c00 	.word	0x40004c00
 8002450:	40005000 	.word	0x40005000
 8002454:	40011400 	.word	0x40011400
 8002458:	40007800 	.word	0x40007800
 800245c:	40007c00 	.word	0x40007c00
 8002460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002464:	d006      	beq.n	8002474 <UART_SetConfig+0x330>
 8002466:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800246a:	d009      	beq.n	8002480 <UART_SetConfig+0x33c>
 800246c:	e00b      	b.n	8002486 <UART_SetConfig+0x342>
 800246e:	2300      	movs	r3, #0
 8002470:	77fb      	strb	r3, [r7, #31]
 8002472:	e00e      	b.n	8002492 <UART_SetConfig+0x34e>
 8002474:	2302      	movs	r3, #2
 8002476:	77fb      	strb	r3, [r7, #31]
 8002478:	e00b      	b.n	8002492 <UART_SetConfig+0x34e>
 800247a:	2304      	movs	r3, #4
 800247c:	77fb      	strb	r3, [r7, #31]
 800247e:	e008      	b.n	8002492 <UART_SetConfig+0x34e>
 8002480:	2308      	movs	r3, #8
 8002482:	77fb      	strb	r3, [r7, #31]
 8002484:	e005      	b.n	8002492 <UART_SetConfig+0x34e>
 8002486:	2310      	movs	r3, #16
 8002488:	77fb      	strb	r3, [r7, #31]
 800248a:	bf00      	nop
 800248c:	e001      	b.n	8002492 <UART_SetConfig+0x34e>
 800248e:	2310      	movs	r3, #16
 8002490:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249a:	d17c      	bne.n	8002596 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800249c:	7ffb      	ldrb	r3, [r7, #31]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d859      	bhi.n	8002556 <UART_SetConfig+0x412>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <UART_SetConfig+0x364>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024cd 	.word	0x080024cd
 80024ac:	080024eb 	.word	0x080024eb
 80024b0:	08002509 	.word	0x08002509
 80024b4:	08002557 	.word	0x08002557
 80024b8:	08002521 	.word	0x08002521
 80024bc:	08002557 	.word	0x08002557
 80024c0:	08002557 	.word	0x08002557
 80024c4:	08002557 	.word	0x08002557
 80024c8:	0800253f 	.word	0x0800253f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024cc:	f7ff f90c 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 80024d0:	4603      	mov	r3, r0
 80024d2:	005a      	lsls	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	441a      	add	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	61bb      	str	r3, [r7, #24]
        break;
 80024e8:	e038      	b.n	800255c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024ea:	f7ff f911 	bl	8001710 <HAL_RCC_GetPCLK2Freq>
 80024ee:	4603      	mov	r3, r0
 80024f0:	005a      	lsls	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	61bb      	str	r3, [r7, #24]
        break;
 8002506:	e029      	b.n	800255c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	085a      	lsrs	r2, r3, #1
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <UART_SetConfig+0x540>)
 8002510:	4413      	add	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6852      	ldr	r2, [r2, #4]
 8002516:	fbb3 f3f2 	udiv	r3, r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	61bb      	str	r3, [r7, #24]
        break;
 800251e:	e01d      	b.n	800255c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002520:	f7fe fffe 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 8002524:	4603      	mov	r3, r0
 8002526:	005a      	lsls	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	441a      	add	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	61bb      	str	r3, [r7, #24]
        break;
 800253c:	e00e      	b.n	800255c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	61bb      	str	r3, [r7, #24]
        break;
 8002554:	e002      	b.n	800255c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
        break;
 800255a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	d916      	bls.n	8002590 <UART_SetConfig+0x44c>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d212      	bcs.n	8002590 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f023 030f 	bic.w	r3, r3, #15
 8002572:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	b29a      	uxth	r2, r3
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	4313      	orrs	r3, r2
 8002584:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	89fa      	ldrh	r2, [r7, #14]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	e06e      	b.n	800266e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	75fb      	strb	r3, [r7, #23]
 8002594:	e06b      	b.n	800266e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002596:	7ffb      	ldrb	r3, [r7, #31]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d857      	bhi.n	800264c <UART_SetConfig+0x508>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <UART_SetConfig+0x460>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025c9 	.word	0x080025c9
 80025a8:	080025e5 	.word	0x080025e5
 80025ac:	08002601 	.word	0x08002601
 80025b0:	0800264d 	.word	0x0800264d
 80025b4:	08002619 	.word	0x08002619
 80025b8:	0800264d 	.word	0x0800264d
 80025bc:	0800264d 	.word	0x0800264d
 80025c0:	0800264d 	.word	0x0800264d
 80025c4:	08002635 	.word	0x08002635
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025c8:	f7ff f88e 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	b29b      	uxth	r3, r3
 80025e0:	61bb      	str	r3, [r7, #24]
        break;
 80025e2:	e036      	b.n	8002652 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025e4:	f7ff f894 	bl	8001710 <HAL_RCC_GetPCLK2Freq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	61bb      	str	r3, [r7, #24]
        break;
 80025fe:	e028      	b.n	8002652 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	085a      	lsrs	r2, r3, #1
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <UART_SetConfig+0x544>)
 8002608:	4413      	add	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6852      	ldr	r2, [r2, #4]
 800260e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	61bb      	str	r3, [r7, #24]
        break;
 8002616:	e01c      	b.n	8002652 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002618:	f7fe ff82 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	441a      	add	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	b29b      	uxth	r3, r3
 8002630:	61bb      	str	r3, [r7, #24]
        break;
 8002632:	e00e      	b.n	8002652 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	b29b      	uxth	r3, r3
 8002648:	61bb      	str	r3, [r7, #24]
        break;
 800264a:	e002      	b.n	8002652 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	75fb      	strb	r3, [r7, #23]
        break;
 8002650:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d908      	bls.n	800266a <UART_SetConfig+0x526>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265e:	d204      	bcs.n	800266a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	60da      	str	r2, [r3, #12]
 8002668:	e001      	b.n	800266e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	01e84800 	.word	0x01e84800
 8002688:	00f42400 	.word	0x00f42400

0800268c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01a      	beq.n	80027a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278a:	d10a      	bne.n	80027a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80027de:	f7fd fefd 	bl	80005dc <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d10e      	bne.n	8002810 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f814 	bl	800282e <UART_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e00a      	b.n	8002826 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800283e:	e02a      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002846:	d026      	beq.n	8002896 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002848:	f7fd fec8 	bl	80005dc <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	d302      	bcc.n	800285e <UART_WaitOnFlagUntilTimeout+0x30>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11b      	bne.n	8002896 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800286c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e00f      	b.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d0c5      	beq.n	8002840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <MX_GPIO_Init+0x90>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <MX_GPIO_Init+0x90>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <MX_GPIO_Init+0x90>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <MX_GPIO_Init+0x90>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a17      	ldr	r2, [pc, #92]	; (8002950 <MX_GPIO_Init+0x90>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <MX_GPIO_Init+0x90>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <MX_GPIO_Init+0x90>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <MX_GPIO_Init+0x90>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <MX_GPIO_Init+0x90>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800291e:	2200      	movs	r2, #0
 8002920:	f244 0181 	movw	r1, #16513	; 0x4081
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <MX_GPIO_Init+0x94>)
 8002926:	f7fe f8f5 	bl	8000b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800292a:	f244 0381 	movw	r3, #16513	; 0x4081
 800292e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002930:	2301      	movs	r3, #1
 8002932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	4619      	mov	r1, r3
 8002942:	4804      	ldr	r0, [pc, #16]	; (8002954 <MX_GPIO_Init+0x94>)
 8002944:	f7fd ff3c 	bl	80007c0 <HAL_GPIO_Init>

}
 8002948:	bf00      	nop
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	40020400 	.word	0x40020400

08002958 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <MX_I2C1_Init+0x74>)
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <MX_I2C1_Init+0x78>)
 8002960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <MX_I2C1_Init+0x74>)
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <MX_I2C1_Init+0x7c>)
 8002966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <MX_I2C1_Init+0x74>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <MX_I2C1_Init+0x74>)
 8002970:	2201      	movs	r2, #1
 8002972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <MX_I2C1_Init+0x74>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <MX_I2C1_Init+0x74>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <MX_I2C1_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <MX_I2C1_Init+0x74>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <MX_I2C1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002992:	480e      	ldr	r0, [pc, #56]	; (80029cc <MX_I2C1_Init+0x74>)
 8002994:	f7fe f8f2 	bl	8000b7c <HAL_I2C_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800299e:	f000 f941 	bl	8002c24 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029a2:	2100      	movs	r1, #0
 80029a4:	4809      	ldr	r0, [pc, #36]	; (80029cc <MX_I2C1_Init+0x74>)
 80029a6:	f7fe f979 	bl	8000c9c <HAL_I2CEx_ConfigAnalogFilter>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029b0:	f000 f938 	bl	8002c24 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029b4:	2100      	movs	r1, #0
 80029b6:	4805      	ldr	r0, [pc, #20]	; (80029cc <MX_I2C1_Init+0x74>)
 80029b8:	f7fe f9bb 	bl	8000d32 <HAL_I2CEx_ConfigDigitalFilter>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029c2:	f000 f92f 	bl	8002c24 <Error_Handler>
  }

}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000030 	.word	0x20000030
 80029d0:	40005400 	.word	0x40005400
 80029d4:	20404768 	.word	0x20404768

080029d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_I2C_MspInit+0x7c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d128      	bne.n	8002a4c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_I2C_MspInit+0x80>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_I2C_MspInit+0x80>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_I2C_MspInit+0x80>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a18:	2312      	movs	r3, #18
 8002a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a24:	2304      	movs	r3, #4
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480b      	ldr	r0, [pc, #44]	; (8002a5c <HAL_I2C_MspInit+0x84>)
 8002a30:	f7fd fec6 	bl	80007c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_I2C_MspInit+0x80>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_I2C_MspInit+0x80>)
 8002a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_I2C_MspInit+0x80>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3728      	adds	r7, #40	; 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40005400 	.word	0x40005400
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020400 	.word	0x40020400

08002a60 <SysTick_Handler>:
/* USER CODE BEGIN 0 */
/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002a64:	f7fd fda6 	bl	80005b4 <HAL_IncTick>


	if (HAL_GetTick() % 500 == 0) {
 8002a68:	f7fd fdb8 	bl	80005dc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <SysTick_Handler+0x30>)
 8002a70:	fba3 1302 	umull	r1, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <SysTick_Handler+0x2a>
		tick_500ms = 1;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <SysTick_Handler+0x34>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
	}

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	10624dd3 	.word	0x10624dd3
 8002a94:	20000028 	.word	0x20000028

08002a98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a9e:	f7fd fd4b 	bl	8000538 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002aa2:	f000 f82d 	bl	8002b00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002aa6:	f7ff ff0b 	bl	80028c0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002aaa:	f7ff ff55 	bl	8002958 <MX_I2C1_Init>
	MX_UART4_Init();
 8002aae:	f000 f945 	bl	8002d3c <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	uint8_t obuf[] = "Hello World\r\n";
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <main+0x58>)
 8002ab4:	463c      	mov	r4, r7
 8002ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ab8:	c407      	stmia	r4!, {r0, r1, r2}
 8002aba:	8023      	strh	r3, [r4, #0]
		UART4->TDR = 0x48;
		while(!(UART4->ISR & UART_FLAG_TC)) {}
		HAL_Delay(500);
		*/

		if(tick_500ms) {
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <main+0x5c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0fa      	beq.n	8002abc <main+0x24>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	480b      	ldr	r0, [pc, #44]	; (8002af8 <main+0x60>)
 8002aca:	f7fe f83c 	bl	8000b46 <HAL_GPIO_TogglePin>
			if (HAL_UART_Transmit(&huart4, obuf, (uint16_t)sizeof(obuf), HAL_MAX_DELAY) != HAL_OK) {
 8002ace:	4639      	mov	r1, r7
 8002ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad4:	220e      	movs	r2, #14
 8002ad6:	4809      	ldr	r0, [pc, #36]	; (8002afc <main+0x64>)
 8002ad8:	f7ff faa2 	bl	8002020 <HAL_UART_Transmit>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <main+0x4e>
				Error_Handler();
 8002ae2:	f000 f89f 	bl	8002c24 <Error_Handler>
			}
			tick_500ms = 0;
 8002ae6:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <main+0x5c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
		if(tick_500ms) {
 8002aec:	e7e6      	b.n	8002abc <main+0x24>
 8002aee:	bf00      	nop
 8002af0:	08002ee8 	.word	0x08002ee8
 8002af4:	20000028 	.word	0x20000028
 8002af8:	40020400 	.word	0x40020400
 8002afc:	2000007c 	.word	0x2000007c

08002b00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0b8      	sub	sp, #224	; 0xe0
 8002b04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b0a:	2234      	movs	r2, #52	; 0x34
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f9d6 	bl	8002ec0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	2290      	movs	r2, #144	; 0x90
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f9c7 	bl	8002ec0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <SystemClock_Config+0x11c>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a39      	ldr	r2, [pc, #228]	; (8002c1c <SystemClock_Config+0x11c>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <SystemClock_Config+0x11c>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4a:	4b35      	ldr	r3, [pc, #212]	; (8002c20 <SystemClock_Config+0x120>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a34      	ldr	r2, [pc, #208]	; (8002c20 <SystemClock_Config+0x120>)
 8002b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <SystemClock_Config+0x120>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b62:	2302      	movs	r3, #2
 8002b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b6e:	2310      	movs	r3, #16
 8002b70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b74:	2302      	movs	r3, #2
 8002b76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002b80:	2308      	movs	r3, #8
 8002b82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8002b86:	23d8      	movs	r3, #216	; 0xd8
 8002b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b92:	2302      	movs	r3, #2
 8002b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe f965 	bl	8000e6c <HAL_RCC_OscConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <SystemClock_Config+0xac>
	{
		Error_Handler();
 8002ba8:	f000 f83c 	bl	8002c24 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002bac:	f7fe f90e 	bl	8000dcc <HAL_PWREx_EnableOverDrive>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <SystemClock_Config+0xba>
	{
		Error_Handler();
 8002bb6:	f000 f835 	bl	8002c24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bba:	230f      	movs	r3, #15
 8002bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002be0:	2107      	movs	r1, #7
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fbb4 	bl	8001350 <HAL_RCC_ClockConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8002bee:	f000 f819 	bl	8002c24 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1;
 8002bf2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002bf6:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fd97 	bl	8001738 <HAL_RCCEx_PeriphCLKConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <SystemClock_Config+0x114>
	{
		Error_Handler();
 8002c10:	f000 f808 	bl	8002c24 <Error_Handler>
	}
}
 8002c14:	bf00      	nop
 8002c16:	37e0      	adds	r7, #224	; 0xe0
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000

08002c24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* Turn on red Nucleo LED, turn off blue and green */
	while(1) {
		GPIOB->BSRR = (GPIO_PIN_14) | (GPIO_PIN_0|GPIO_PIN_7) << 16;
 8002c28:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <Error_Handler+0xc>)
 8002c2a:	4a02      	ldr	r2, [pc, #8]	; (8002c34 <Error_Handler+0x10>)
 8002c2c:	619a      	str	r2, [r3, #24]
 8002c2e:	e7fb      	b.n	8002c28 <Error_Handler+0x4>
 8002c30:	40020400 	.word	0x40020400
 8002c34:	00814000 	.word	0x00814000

08002c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_MspInit+0x44>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_MspInit+0x44>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <HAL_MspInit+0x44>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_MspInit+0x44>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <HAL_MspInit+0x44>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_MspInit+0x44>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800

08002c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <SystemInit+0x5c>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <SystemInit+0x5c>)
 8002cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <SystemInit+0x60>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <SystemInit+0x60>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <SystemInit+0x60>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <SystemInit+0x60>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	490d      	ldr	r1, [pc, #52]	; (8002d30 <SystemInit+0x60>)
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <SystemInit+0x64>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <SystemInit+0x60>)
 8002d04:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <SystemInit+0x68>)
 8002d06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <SystemInit+0x60>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <SystemInit+0x60>)
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <SystemInit+0x60>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SystemInit+0x5c>)
 8002d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d20:	609a      	str	r2, [r3, #8]
#endif
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	fef6ffff 	.word	0xfef6ffff
 8002d38:	24003010 	.word	0x24003010

08002d3c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d42:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <MX_UART4_Init+0x5c>)
 8002d44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d62:	220c      	movs	r2, #12
 8002d64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d7e:	4805      	ldr	r0, [pc, #20]	; (8002d94 <MX_UART4_Init+0x58>)
 8002d80:	f7ff f900 	bl	8001f84 <HAL_UART_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002d8a:	f7ff ff4b 	bl	8002c24 <Error_Handler>
  }

}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000007c 	.word	0x2000007c
 8002d98:	40004c00 	.word	0x40004c00

08002d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <HAL_UART_MspInit+0x7c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d127      	bne.n	8002e0e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_UART_MspInit+0x80>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <HAL_UART_MspInit+0x80>)
 8002dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_UART_MspInit+0x80>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_UART_MspInit+0x80>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <HAL_UART_MspInit+0x80>)
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_UART_MspInit+0x80>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dee:	2303      	movs	r3, #3
 8002df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002dfe:	2308      	movs	r3, #8
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	4619      	mov	r1, r3
 8002e08:	4805      	ldr	r0, [pc, #20]	; (8002e20 <HAL_UART_MspInit+0x84>)
 8002e0a:	f7fd fcd9 	bl	80007c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40004c00 	.word	0x40004c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020c00 	.word	0x40020c00

08002e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e2a:	e003      	b.n	8002e34 <LoopCopyDataInit>

08002e2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e32:	3104      	adds	r1, #4

08002e34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e34:	480b      	ldr	r0, [pc, #44]	; (8002e64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e3c:	d3f6      	bcc.n	8002e2c <CopyDataInit>
  ldr  r2, =_sbss
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e40:	e002      	b.n	8002e48 <LoopFillZerobss>

08002e42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e44:	f842 3b04 	str.w	r3, [r2], #4

08002e48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e4c:	d3f9      	bcc.n	8002e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e4e:	f7ff ff3f 	bl	8002cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e52:	f000 f811 	bl	8002e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e56:	f7ff fe1f 	bl	8002a98 <main>
  bx  lr    
 8002e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e5c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002e60:	08002f20 	.word	0x08002f20
  ldr  r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e68:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002e6c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002e70:	200000fc 	.word	0x200000fc

08002e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <ADC_IRQHandler>
	...

08002e78 <__libc_init_array>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4e0d      	ldr	r6, [pc, #52]	; (8002eb0 <__libc_init_array+0x38>)
 8002e7c:	4c0d      	ldr	r4, [pc, #52]	; (8002eb4 <__libc_init_array+0x3c>)
 8002e7e:	1ba4      	subs	r4, r4, r6
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	2500      	movs	r5, #0
 8002e84:	42a5      	cmp	r5, r4
 8002e86:	d109      	bne.n	8002e9c <__libc_init_array+0x24>
 8002e88:	4e0b      	ldr	r6, [pc, #44]	; (8002eb8 <__libc_init_array+0x40>)
 8002e8a:	4c0c      	ldr	r4, [pc, #48]	; (8002ebc <__libc_init_array+0x44>)
 8002e8c:	f000 f820 	bl	8002ed0 <_init>
 8002e90:	1ba4      	subs	r4, r4, r6
 8002e92:	10a4      	asrs	r4, r4, #2
 8002e94:	2500      	movs	r5, #0
 8002e96:	42a5      	cmp	r5, r4
 8002e98:	d105      	bne.n	8002ea6 <__libc_init_array+0x2e>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea0:	4798      	blx	r3
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	e7ee      	b.n	8002e84 <__libc_init_array+0xc>
 8002ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eaa:	4798      	blx	r3
 8002eac:	3501      	adds	r5, #1
 8002eae:	e7f2      	b.n	8002e96 <__libc_init_array+0x1e>
 8002eb0:	08002f18 	.word	0x08002f18
 8002eb4:	08002f18 	.word	0x08002f18
 8002eb8:	08002f18 	.word	0x08002f18
 8002ebc:	08002f1c 	.word	0x08002f1c

08002ec0 <memset>:
 8002ec0:	4402      	add	r2, r0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d100      	bne.n	8002eca <memset+0xa>
 8002ec8:	4770      	bx	lr
 8002eca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ece:	e7f9      	b.n	8002ec4 <memset+0x4>

08002ed0 <_init>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr

08002edc <_fini>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr
