
i2c_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000219c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023ac  080023ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080023c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080023c0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009048  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017be  00000000  00000000  00029082  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e8  00000000  00000000  0002a840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025004  00000000  00000000  0002b728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008148  00000000  00000000  0005072c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3e5f  00000000  00000000  00058874  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  0013c750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800237c 	.word	0x0800237c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800237c 	.word	0x0800237c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f90b 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f001 fe3a 	bl	80021c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f917 	bl	80007a6 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f8ed 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000028 	.word	0x20000028

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	4313      	orrs	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	05fa0000 	.word	0x05fa0000

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff47 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff5c 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb0 	bl	8000714 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	e175      	b.n	8000acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007e0:	2201      	movs	r2, #1
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f040 8164 	bne.w	8000ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b12      	cmp	r3, #18
 800080c:	d123      	bne.n	8000856 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	08da      	lsrs	r2, r3, #3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3208      	adds	r2, #8
 8000816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	220f      	movs	r2, #15
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4013      	ands	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	691a      	ldr	r2, [r3, #16]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4313      	orrs	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	08da      	lsrs	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	69b9      	ldr	r1, [r7, #24]
 8000852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2203      	movs	r2, #3
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 0203 	and.w	r2, r3, #3
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d00b      	beq.n	80008aa <HAL_GPIO_Init+0xea>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d007      	beq.n	80008aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089e:	2b11      	cmp	r3, #17
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b12      	cmp	r3, #18
 80008a8:	d130      	bne.n	800090c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68da      	ldr	r2, [r3, #12]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e0:	2201      	movs	r2, #1
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 80be 	beq.w	8000ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b65      	ldr	r3, [pc, #404]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a64      	ldr	r2, [pc, #400]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b62      	ldr	r3, [pc, #392]	; (8000ae0 <HAL_GPIO_Init+0x320>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000962:	4a60      	ldr	r2, [pc, #384]	; (8000ae4 <HAL_GPIO_Init+0x324>)
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_GPIO_Init+0x328>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d037      	beq.n	80009fe <HAL_GPIO_Init+0x23e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a56      	ldr	r2, [pc, #344]	; (8000aec <HAL_GPIO_Init+0x32c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d031      	beq.n	80009fa <HAL_GPIO_Init+0x23a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <HAL_GPIO_Init+0x330>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d02b      	beq.n	80009f6 <HAL_GPIO_Init+0x236>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <HAL_GPIO_Init+0x334>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d025      	beq.n	80009f2 <HAL_GPIO_Init+0x232>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a53      	ldr	r2, [pc, #332]	; (8000af8 <HAL_GPIO_Init+0x338>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d01f      	beq.n	80009ee <HAL_GPIO_Init+0x22e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a52      	ldr	r2, [pc, #328]	; (8000afc <HAL_GPIO_Init+0x33c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d019      	beq.n	80009ea <HAL_GPIO_Init+0x22a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_GPIO_Init+0x340>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0x226>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a50      	ldr	r2, [pc, #320]	; (8000b04 <HAL_GPIO_Init+0x344>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00d      	beq.n	80009e2 <HAL_GPIO_Init+0x222>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4f      	ldr	r2, [pc, #316]	; (8000b08 <HAL_GPIO_Init+0x348>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0x21e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_Init+0x21a>
 80009d6:	2309      	movs	r3, #9
 80009d8:	e012      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009da:	230a      	movs	r3, #10
 80009dc:	e010      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009de:	2308      	movs	r3, #8
 80009e0:	e00e      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009e2:	2307      	movs	r3, #7
 80009e4:	e00c      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009e6:	2306      	movs	r3, #6
 80009e8:	e00a      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009ea:	2305      	movs	r3, #5
 80009ec:	e008      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009ee:	2304      	movs	r3, #4
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009f2:	2303      	movs	r3, #3
 80009f4:	e004      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x240>
 80009fe:	2300      	movs	r3, #0
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	f002 0203 	and.w	r2, r2, #3
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a10:	4934      	ldr	r1, [pc, #208]	; (8000ae4 <HAL_GPIO_Init+0x324>)
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a42:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a48:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a96:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_GPIO_Init+0x350>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	f67f ae86 	bls.w	80007e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40021400 	.word	0x40021400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40021c00 	.word	0x40021c00
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	40022400 	.word	0x40022400
 8000b10:	40013c00 	.word	0x40013c00

08000b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b24:	787b      	ldrb	r3, [r7, #1]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000b30:	e003      	b.n	8000b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	041a      	lsls	r2, r3, #16
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	619a      	str	r2, [r3, #24]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e07f      	b.n	8000c5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d106      	bne.n	8000b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f001 fa3a 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2224      	movs	r2, #36	; 0x24
 8000b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 0201 	bic.w	r2, r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	e006      	b.n	8000bd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d104      	bne.n	8000be2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6859      	ldr	r1, [r3, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_I2C_Init+0x11c>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691a      	ldr	r2, [r3, #16]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	ea42 0103 	orr.w	r1, r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	021a      	lsls	r2, r3, #8
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69d9      	ldr	r1, [r3, #28]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a1a      	ldr	r2, [r3, #32]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f042 0201 	orr.w	r2, r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2220      	movs	r2, #32
 8000c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	02008000 	.word	0x02008000

08000c68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b20      	cmp	r3, #32
 8000c7c:	d138      	bne.n	8000cf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e032      	b.n	8000cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2224      	movs	r2, #36	; 0x24
 8000c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0201 	bic.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2220      	movs	r2, #32
 8000ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000cf0:	2302      	movs	r3, #2
  }
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b20      	cmp	r3, #32
 8000d12:	d139      	bne.n	8000d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d101      	bne.n	8000d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e033      	b.n	8000d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2224      	movs	r2, #36	; 0x24
 8000d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0201 	bic.w	r2, r2, #1
 8000d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e000      	b.n	8000d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d88:	2302      	movs	r3, #2
  }
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc6:	f7ff fc09 	bl	80005dc <HAL_GetTick>
 8000dca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000dcc:	e009      	b.n	8000de2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dce:	f7ff fc05 	bl	80005dc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ddc:	d901      	bls.n	8000de2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e022      	b.n	8000e28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dee:	d1ee      	bne.n	8000dce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfc:	f7ff fbee 	bl	80005dc <HAL_GetTick>
 8000e00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e02:	e009      	b.n	8000e18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e04:	f7ff fbea 	bl	80005dc <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e12:	d901      	bls.n	8000e18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e007      	b.n	8000e28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e24:	d1ee      	bne.n	8000e04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e25e      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8087 	beq.w	8000f6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e5c:	4b96      	ldr	r3, [pc, #600]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d00c      	beq.n	8000e82 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e68:	4b93      	ldr	r3, [pc, #588]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d112      	bne.n	8000e9a <HAL_RCC_OscConfig+0x62>
 8000e74:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e80:	d10b      	bne.n	8000e9a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	4b8d      	ldr	r3, [pc, #564]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d06c      	beq.n	8000f68 <HAL_RCC_OscConfig+0x130>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d168      	bne.n	8000f68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e238      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea2:	d106      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x7a>
 8000ea4:	4b84      	ldr	r3, [pc, #528]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a83      	ldr	r2, [pc, #524]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e02e      	b.n	8000f10 <HAL_RCC_OscConfig+0xd8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x9c>
 8000eba:	4b7f      	ldr	r3, [pc, #508]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a7e      	ldr	r2, [pc, #504]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b7c      	ldr	r3, [pc, #496]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a7b      	ldr	r2, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e01d      	b.n	8000f10 <HAL_RCC_OscConfig+0xd8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0xc0>
 8000ede:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a75      	ldr	r2, [pc, #468]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a72      	ldr	r2, [pc, #456]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0xd8>
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a6e      	ldr	r2, [pc, #440]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b6c      	ldr	r3, [pc, #432]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a6b      	ldr	r2, [pc, #428]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fb60 	bl	80005dc <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fb5c 	bl	80005dc <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e1ec      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xe8>
 8000f3e:	e014      	b.n	8000f6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	f7ff fb4c 	bl	80005dc <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fb48 	bl	80005dc <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	; 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e1d8      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x110>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d069      	beq.n	800104a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f82:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d11c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x190>
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d116      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x17a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e1ac      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	493d      	ldr	r1, [pc, #244]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc6:	e040      	b.n	800104a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d023      	beq.n	8001018 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fafe 	bl	80005dc <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fafa 	bl	80005dc <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e18a      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4929      	ldr	r1, [pc, #164]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
 8001016:	e018      	b.n	800104a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fada 	bl	80005dc <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fad6 	bl	80005dc <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e166      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d038      	beq.n	80010c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d019      	beq.n	8001092 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001062:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106a:	f7ff fab7 	bl	80005dc <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001072:	f7ff fab3 	bl	80005dc <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e143      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x23a>
 8001090:	e01a      	b.n	80010c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_RCC_OscConfig+0x280>)
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff fa9d 	bl	80005dc <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a6:	f7ff fa99 	bl	80005dc <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d903      	bls.n	80010bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e129      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
 80010b8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010bc:	4b95      	ldr	r3, [pc, #596]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80010be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ee      	bne.n	80010a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80a4 	beq.w	800121e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4b8f      	ldr	r3, [pc, #572]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10d      	bne.n	80010fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a8b      	ldr	r2, [pc, #556]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b89      	ldr	r3, [pc, #548]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010fa:	2301      	movs	r3, #1
 80010fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010fe:	4b86      	ldr	r3, [pc, #536]	; (8001318 <HAL_RCC_OscConfig+0x4e0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	2b00      	cmp	r3, #0
 8001108:	d118      	bne.n	800113c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800110a:	4b83      	ldr	r3, [pc, #524]	; (8001318 <HAL_RCC_OscConfig+0x4e0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a82      	ldr	r2, [pc, #520]	; (8001318 <HAL_RCC_OscConfig+0x4e0>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001116:	f7ff fa61 	bl	80005dc <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800111e:	f7ff fa5d 	bl	80005dc <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e0ed      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001130:	4b79      	ldr	r3, [pc, #484]	; (8001318 <HAL_RCC_OscConfig+0x4e0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x31a>
 8001144:	4b73      	ldr	r3, [pc, #460]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001148:	4a72      	ldr	r2, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6713      	str	r3, [r2, #112]	; 0x70
 8001150:	e02d      	b.n	80011ae <HAL_RCC_OscConfig+0x376>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x33c>
 800115a:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115e:	4a6d      	ldr	r2, [pc, #436]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	6713      	str	r3, [r2, #112]	; 0x70
 8001166:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800116a:	4a6a      	ldr	r2, [pc, #424]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	6713      	str	r3, [r2, #112]	; 0x70
 8001172:	e01c      	b.n	80011ae <HAL_RCC_OscConfig+0x376>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b05      	cmp	r3, #5
 800117a:	d10c      	bne.n	8001196 <HAL_RCC_OscConfig+0x35e>
 800117c:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800117e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001180:	4a64      	ldr	r2, [pc, #400]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6713      	str	r3, [r2, #112]	; 0x70
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800118a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118c:	4a61      	ldr	r2, [pc, #388]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6713      	str	r3, [r2, #112]	; 0x70
 8001194:	e00b      	b.n	80011ae <HAL_RCC_OscConfig+0x376>
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119a:	4a5e      	ldr	r2, [pc, #376]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6713      	str	r3, [r2, #112]	; 0x70
 80011a2:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d015      	beq.n	80011e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa11 	bl	80005dc <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fa0d 	bl	80005dc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e09b      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ee      	beq.n	80011be <HAL_RCC_OscConfig+0x386>
 80011e0:	e014      	b.n	800120c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e2:	f7ff f9fb 	bl	80005dc <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff f9f7 	bl	80005dc <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e085      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001200:	4b44      	ldr	r3, [pc, #272]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ee      	bne.n	80011ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d105      	bne.n	800121e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a3f      	ldr	r2, [pc, #252]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d071      	beq.n	800130a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b08      	cmp	r3, #8
 8001230:	d069      	beq.n	8001306 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d14b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123a:	4b36      	ldr	r3, [pc, #216]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a35      	ldr	r2, [pc, #212]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001246:	f7ff f9c9 	bl	80005dc <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff f9c5 	bl	80005dc <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e055      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69da      	ldr	r2, [r3, #28]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	019b      	lsls	r3, r3, #6
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	085b      	lsrs	r3, r3, #1
 8001284:	3b01      	subs	r3, #1
 8001286:	041b      	lsls	r3, r3, #16
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	061b      	lsls	r3, r3, #24
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	071b      	lsls	r3, r3, #28
 8001298:	491e      	ldr	r1, [pc, #120]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80012a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff f997 	bl	80005dc <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff f993 	bl	80005dc <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e023      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x47a>
 80012d0:	e01b      	b.n	800130a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80012d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff f97d 	bl	80005dc <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff f979 	bl	80005dc <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e009      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_RCC_OscConfig+0x4dc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f0      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4ae>
 8001304:	e001      	b.n	800130a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0ce      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b69      	ldr	r3, [pc, #420]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d910      	bls.n	8001364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b66      	ldr	r3, [pc, #408]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 020f 	bic.w	r2, r3, #15
 800134a:	4964      	ldr	r1, [pc, #400]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b62      	ldr	r3, [pc, #392]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0b6      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800137c:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001394:	4b52      	ldr	r3, [pc, #328]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800139e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a0:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	494c      	ldr	r1, [pc, #304]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d040      	beq.n	8001440 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d115      	bne.n	80013fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e07d      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e071      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e069      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001410:	f7ff f8e4 	bl	80005dc <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff f8e0 	bl	80005dc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e051      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d210      	bcs.n	8001470 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 020f 	bic.w	r2, r3, #15
 8001456:	4921      	ldr	r1, [pc, #132]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e030      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4915      	ldr	r1, [pc, #84]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	490d      	ldr	r1, [pc, #52]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ae:	f000 f81d 	bl	80014ec <HAL_RCC_GetSysClockFreq>
 80014b2:	4601      	mov	r1, r0
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1c8>)
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
 80014c2:	fa21 f303 	lsr.w	r3, r1, r3
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_RCC_ClockConfig+0x1cc>)
 80014c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff f842 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023c00 	.word	0x40023c00
 80014e0:	40023800 	.word	0x40023800
 80014e4:	08002394 	.word	0x08002394
 80014e8:	20000008 	.word	0x20000008

080014ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001502:	4b63      	ldr	r3, [pc, #396]	; (8001690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b04      	cmp	r3, #4
 800150c:	d007      	beq.n	800151e <HAL_RCC_GetSysClockFreq+0x32>
 800150e:	2b08      	cmp	r3, #8
 8001510:	d008      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x38>
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80b4 	bne.w	8001680 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001518:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800151a:	60bb      	str	r3, [r7, #8]
       break;
 800151c:	e0b3      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800151e:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001520:	60bb      	str	r3, [r7, #8]
      break;
 8001522:	e0b0      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001524:	4b5a      	ldr	r3, [pc, #360]	; (8001690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800152c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d04a      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153a:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	099b      	lsrs	r3, r3, #6
 8001540:	f04f 0400 	mov.w	r4, #0
 8001544:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	ea03 0501 	and.w	r5, r3, r1
 8001550:	ea04 0602 	and.w	r6, r4, r2
 8001554:	4629      	mov	r1, r5
 8001556:	4632      	mov	r2, r6
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f04f 0400 	mov.w	r4, #0
 8001560:	0154      	lsls	r4, r2, #5
 8001562:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001566:	014b      	lsls	r3, r1, #5
 8001568:	4619      	mov	r1, r3
 800156a:	4622      	mov	r2, r4
 800156c:	1b49      	subs	r1, r1, r5
 800156e:	eb62 0206 	sbc.w	r2, r2, r6
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f04f 0400 	mov.w	r4, #0
 800157a:	0194      	lsls	r4, r2, #6
 800157c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001580:	018b      	lsls	r3, r1, #6
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	eb64 0402 	sbc.w	r4, r4, r2
 8001588:	f04f 0100 	mov.w	r1, #0
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	00e2      	lsls	r2, r4, #3
 8001592:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001596:	00d9      	lsls	r1, r3, #3
 8001598:	460b      	mov	r3, r1
 800159a:	4614      	mov	r4, r2
 800159c:	195b      	adds	r3, r3, r5
 800159e:	eb44 0406 	adc.w	r4, r4, r6
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	0262      	lsls	r2, r4, #9
 80015ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80015b0:	0259      	lsls	r1, r3, #9
 80015b2:	460b      	mov	r3, r1
 80015b4:	4614      	mov	r4, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	4621      	mov	r1, r4
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f04f 0400 	mov.w	r4, #0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	f7fe fe38 	bl	8000238 <__aeabi_uldivmod>
 80015c8:	4603      	mov	r3, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e049      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	f04f 0400 	mov.w	r4, #0
 80015da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	ea03 0501 	and.w	r5, r3, r1
 80015e6:	ea04 0602 	and.w	r6, r4, r2
 80015ea:	4629      	mov	r1, r5
 80015ec:	4632      	mov	r2, r6
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	f04f 0400 	mov.w	r4, #0
 80015f6:	0154      	lsls	r4, r2, #5
 80015f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015fc:	014b      	lsls	r3, r1, #5
 80015fe:	4619      	mov	r1, r3
 8001600:	4622      	mov	r2, r4
 8001602:	1b49      	subs	r1, r1, r5
 8001604:	eb62 0206 	sbc.w	r2, r2, r6
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	f04f 0400 	mov.w	r4, #0
 8001610:	0194      	lsls	r4, r2, #6
 8001612:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001616:	018b      	lsls	r3, r1, #6
 8001618:	1a5b      	subs	r3, r3, r1
 800161a:	eb64 0402 	sbc.w	r4, r4, r2
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	00e2      	lsls	r2, r4, #3
 8001628:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800162c:	00d9      	lsls	r1, r3, #3
 800162e:	460b      	mov	r3, r1
 8001630:	4614      	mov	r4, r2
 8001632:	195b      	adds	r3, r3, r5
 8001634:	eb44 0406 	adc.w	r4, r4, r6
 8001638:	f04f 0100 	mov.w	r1, #0
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	02a2      	lsls	r2, r4, #10
 8001642:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001646:	0299      	lsls	r1, r3, #10
 8001648:	460b      	mov	r3, r1
 800164a:	4614      	mov	r4, r2
 800164c:	4618      	mov	r0, r3
 800164e:	4621      	mov	r1, r4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f04f 0400 	mov.w	r4, #0
 8001656:	461a      	mov	r2, r3
 8001658:	4623      	mov	r3, r4
 800165a:	f7fe fded 	bl	8000238 <__aeabi_uldivmod>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	3301      	adds	r3, #1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	60bb      	str	r3, [r7, #8]
      break;
 800167e:	e002      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001682:	60bb      	str	r3, [r7, #8]
      break;
 8001684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001686:	68bb      	ldr	r3, [r7, #8]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	00f42400 	.word	0x00f42400
 8001698:	007a1200 	.word	0x007a1200

0800169c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d012      	beq.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016c4:	4b69      	ldr	r3, [pc, #420]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a68      	ldr	r2, [pc, #416]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016ce:	6093      	str	r3, [r2, #8]
 80016d0:	4b66      	ldr	r3, [pc, #408]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	4964      	ldr	r1, [pc, #400]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d017      	beq.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	4959      	ldr	r1, [pc, #356]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001706:	4313      	orrs	r3, r2
 8001708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001714:	d101      	bne.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d017      	beq.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001732:	4b4e      	ldr	r3, [pc, #312]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001738:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	494a      	ldr	r1, [pc, #296]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001742:	4313      	orrs	r3, r2
 8001744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001750:	d101      	bne.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001752:	2301      	movs	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 808b 	beq.w	8001896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a39      	ldr	r2, [pc, #228]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a34      	ldr	r2, [pc, #208]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017a4:	f7fe ff1a 	bl	80005dc <HAL_GetTick>
 80017a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ac:	f7fe ff16 	bl	80005dc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e38d      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d035      	beq.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d02e      	beq.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d114      	bne.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7fe fede 	bl	80005dc <HAL_GetTick>
 8001820:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	e00a      	b.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7fe feda 	bl	80005dc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e34f      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ee      	beq.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800184e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001852:	d111      	bne.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001862:	400b      	ands	r3, r1
 8001864:	4901      	ldr	r1, [pc, #4]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
 800186a:	e00b      	b.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000
 8001874:	0ffffcff 	.word	0x0ffffcff
 8001878:	4bb3      	ldr	r3, [pc, #716]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4ab2      	ldr	r2, [pc, #712]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800187e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001882:	6093      	str	r3, [r2, #8]
 8001884:	4bb0      	ldr	r3, [pc, #704]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	49ad      	ldr	r1, [pc, #692]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001892:	4313      	orrs	r3, r2
 8001894:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d010      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80018a2:	4ba9      	ldr	r3, [pc, #676]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a8:	4aa7      	ldr	r2, [pc, #668]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018b2:	4ba5      	ldr	r3, [pc, #660]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	49a2      	ldr	r1, [pc, #648]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018d0:	4b9d      	ldr	r3, [pc, #628]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018de:	499a      	ldr	r1, [pc, #616]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018f2:	4b95      	ldr	r3, [pc, #596]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001900:	4991      	ldr	r1, [pc, #580]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001914:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001922:	4989      	ldr	r1, [pc, #548]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001924:	4313      	orrs	r3, r2
 8001926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001936:	4b84      	ldr	r3, [pc, #528]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4980      	ldr	r1, [pc, #512]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001946:	4313      	orrs	r3, r2
 8001948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001958:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	f023 0203 	bic.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4978      	ldr	r1, [pc, #480]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001968:	4313      	orrs	r3, r2
 800196a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800197a:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001980:	f023 020c 	bic.w	r2, r3, #12
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001988:	496f      	ldr	r1, [pc, #444]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800198a:	4313      	orrs	r3, r2
 800198c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00a      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800199c:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4967      	ldr	r1, [pc, #412]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00a      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019be:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019cc:	495e      	ldr	r1, [pc, #376]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	4956      	ldr	r1, [pc, #344]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a02:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	494d      	ldr	r1, [pc, #308]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00a      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a24:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	4945      	ldr	r1, [pc, #276]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a54:	493c      	ldr	r1, [pc, #240]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00a      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a76:	4934      	ldr	r1, [pc, #208]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d011      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a98:	492b      	ldr	r1, [pc, #172]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001aa8:	d101      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	491b      	ldr	r1, [pc, #108]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00b      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001afc:	4912      	ldr	r1, [pc, #72]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00f      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b44:	e002      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	4985      	ldr	r1, [pc, #532]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001b60:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b70:	497c      	ldr	r1, [pc, #496]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b86:	f040 80d6 	bne.w	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b96:	f7fe fd21 	bl	80005dc <HAL_GetTick>
 8001b9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b9e:	f7fe fd1d 	bl	80005dc <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	; 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e194      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bb0:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d021      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11d      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001bde:	4b61      	ldr	r3, [pc, #388]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001be4:	0e1b      	lsrs	r3, r3, #24
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	019a      	lsls	r2, r3, #6
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	061b      	lsls	r3, r3, #24
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	071b      	lsls	r3, r3, #28
 8001c04:	4957      	ldr	r1, [pc, #348]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c20:	d00a      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d02e      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c36:	d129      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c38:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c4c:	0f1b      	lsrs	r3, r3, #28
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	019a      	lsls	r2, r3, #6
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	041b      	lsls	r3, r3, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	071b      	lsls	r3, r3, #28
 8001c6c:	493d      	ldr	r1, [pc, #244]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c7a:	f023 021f 	bic.w	r2, r3, #31
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	3b01      	subs	r3, #1
 8001c84:	4937      	ldr	r1, [pc, #220]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01d      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c9e:	0e1b      	lsrs	r3, r3, #24
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cac:	0f1b      	lsrs	r3, r3, #28
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	019a      	lsls	r2, r3, #6
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	071b      	lsls	r3, r3, #28
 8001ccc:	4925      	ldr	r1, [pc, #148]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d011      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	019a      	lsls	r2, r3, #6
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	041b      	lsls	r3, r3, #16
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	061b      	lsls	r3, r3, #24
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	071b      	lsls	r3, r3, #28
 8001cfc:	4919      	ldr	r1, [pc, #100]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d10:	f7fe fc64 	bl	80005dc <HAL_GetTick>
 8001d14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d18:	f7fe fc60 	bl	80005dc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0d7      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	f040 80cd 	bne.w	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d4a:	f7fe fc47 	bl	80005dc <HAL_GetTick>
 8001d4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d52:	f7fe fc43 	bl	80005dc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b64      	cmp	r3, #100	; 0x64
 8001d5e:	d903      	bls.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0ba      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001d64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d68:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d74:	d0ed      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d02e      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d12a      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	0f1b      	lsrs	r3, r3, #28
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	019a      	lsls	r2, r3, #6
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	061b      	lsls	r3, r3, #24
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	071b      	lsls	r3, r3, #28
 8001dd2:	4944      	ldr	r1, [pc, #272]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001dda:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	493d      	ldr	r1, [pc, #244]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d022      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e08:	d11d      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e10:	0e1b      	lsrs	r3, r3, #24
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e18:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	0f1b      	lsrs	r3, r3, #28
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	019a      	lsls	r2, r3, #6
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	061b      	lsls	r3, r3, #24
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	071b      	lsls	r3, r3, #28
 8001e3e:	4929      	ldr	r1, [pc, #164]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d028      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e58:	0e1b      	lsrs	r3, r3, #24
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	0c1b      	lsrs	r3, r3, #16
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	019a      	lsls	r2, r3, #6
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	071b      	lsls	r3, r3, #28
 8001e86:	4917      	ldr	r1, [pc, #92]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	4911      	ldr	r1, [pc, #68]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fb94 	bl	80005dc <HAL_GetTick>
 8001eb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001eb8:	f7fe fb90 	bl	80005dc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e007      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed6:	d1ef      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_GPIO_Init+0x78>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <MX_GPIO_Init+0x78>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_GPIO_Init+0x78>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_GPIO_Init+0x78>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <MX_GPIO_Init+0x78>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_GPIO_Init+0x78>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <MX_GPIO_Init+0x7c>)
 8001f36:	f7fe fded 	bl	8000b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8001f3a:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4619      	mov	r1, r3
 8001f52:	4804      	ldr	r0, [pc, #16]	; (8001f64 <MX_GPIO_Init+0x7c>)
 8001f54:	f7fe fc34 	bl	80007c0 <HAL_GPIO_Init>

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020400 	.word	0x40020400

08001f68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <MX_I2C1_Init+0x78>)
 8001f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <MX_I2C1_Init+0x7c>)
 8001f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa2:	480e      	ldr	r0, [pc, #56]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001fa4:	f7fe fdd0 	bl	8000b48 <HAL_I2C_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fae:	f000 f8fd 	bl	80021ac <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001fb6:	f7fe fe57 	bl	8000c68 <HAL_I2CEx_ConfigAnalogFilter>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f000 f8f4 	bl	80021ac <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001fc8:	f7fe fe99 	bl	8000cfe <HAL_I2CEx_ConfigDigitalFilter>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f000 f8eb 	bl	80021ac <Error_Handler>
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000002c 	.word	0x2000002c
 8001fe0:	40005400 	.word	0x40005400
 8001fe4:	00c0eaff 	.word	0x00c0eaff

08001fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_I2C_MspInit+0x7c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d128      	bne.n	800205c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_I2C_MspInit+0x80>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_I2C_MspInit+0x80>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_I2C_MspInit+0x80>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002028:	2312      	movs	r3, #18
 800202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202c:	2301      	movs	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002034:	2304      	movs	r3, #4
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	480b      	ldr	r0, [pc, #44]	; (800206c <HAL_I2C_MspInit+0x84>)
 8002040:	f7fe fbbe 	bl	80007c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_I2C_MspInit+0x80>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_I2C_MspInit+0x80>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_I2C_MspInit+0x80>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40005400 	.word	0x40005400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400

08002070 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002074:	f7fe fa60 	bl	8000538 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002078:	f000 f806 	bl	8002088 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800207c:	f7ff ff34 	bl	8001ee8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002080:	f7ff ff72 	bl	8001f68 <MX_I2C1_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002084:	e7fe      	b.n	8002084 <main+0x14>
	...

08002088 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b8      	sub	sp, #224	; 0xe0
 800208c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002092:	2234      	movs	r2, #52	; 0x34
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f968 	bl	800236c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800209c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	2290      	movs	r2, #144	; 0x90
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f959 	bl	800236c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <SystemClock_Config+0x11c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a39      	ldr	r2, [pc, #228]	; (80021a4 <SystemClock_Config+0x11c>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <SystemClock_Config+0x11c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020d2:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <SystemClock_Config+0x120>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020da:	4a33      	ldr	r2, [pc, #204]	; (80021a8 <SystemClock_Config+0x120>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <SystemClock_Config+0x120>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020fa:	2310      	movs	r3, #16
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 800210c:	2308      	movs	r3, #8
 800210e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 100;
 8002112:	2364      	movs	r3, #100	; 0x64
 8002114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002118:	2302      	movs	r3, #2
 800211a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002124:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fe85 	bl	8000e38 <HAL_RCC_OscConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8002134:	f000 f83a 	bl	80021ac <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002138:	f7fe fe2e 	bl	8000d98 <HAL_PWREx_EnableOverDrive>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8002142:	f000 f833 	bl	80021ac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002146:	230f      	movs	r3, #15
 8002148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002166:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800216a:	2103      	movs	r1, #3
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f8d5 	bl	800131c <HAL_RCC_ClockConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <SystemClock_Config+0xf4>
	{
		Error_Handler();
 8002178:	f000 f818 	bl	80021ac <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800217c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002180:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002182:	2300      	movs	r3, #0
 8002184:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fa86 	bl	800169c <HAL_RCCEx_PeriphCLKConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <SystemClock_Config+0x112>
	{
		Error_Handler();
 8002196:	f000 f809 	bl	80021ac <Error_Handler>
	}
}
 800219a:	bf00      	nop
 800219c:	37e0      	adds	r7, #224	; 0xe0
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40007000 	.word	0x40007000

080021ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* Turn on red Nucleo LED, turn off blue and green */
	while(1) {
		GPIOB->BSRR = (GPIO_PIN_14) | (GPIO_PIN_0|GPIO_PIN_7) << 16;
 80021b0:	4b01      	ldr	r3, [pc, #4]	; (80021b8 <Error_Handler+0xc>)
 80021b2:	4a02      	ldr	r2, [pc, #8]	; (80021bc <Error_Handler+0x10>)
 80021b4:	619a      	str	r2, [r3, #24]
 80021b6:	e7fb      	b.n	80021b0 <Error_Handler+0x4>
 80021b8:	40020400 	.word	0x40020400
 80021bc:	00814000 	.word	0x00814000

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_MspInit+0x44>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_MspInit+0x44>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_MspInit+0x44>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_MspInit+0x44>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_MspInit+0x44>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_MspInit+0x44>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <MemManage_Handler+0x4>

08002222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler+0x4>

0800222e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800225c:	f7fe f9aa 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <SystemInit+0x5c>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <SystemInit+0x5c>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <SystemInit+0x60>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <SystemInit+0x60>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <SystemInit+0x60>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <SystemInit+0x60>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	490d      	ldr	r1, [pc, #52]	; (80022c4 <SystemInit+0x60>)
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <SystemInit+0x64>)
 8002292:	4013      	ands	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <SystemInit+0x60>)
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <SystemInit+0x68>)
 800229a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <SystemInit+0x60>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <SystemInit+0x60>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <SystemInit+0x60>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SystemInit+0x5c>)
 80022b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b4:	609a      	str	r2, [r3, #8]
#endif
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	fef6ffff 	.word	0xfef6ffff
 80022cc:	24003010 	.word	0x24003010

080022d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022d6:	e003      	b.n	80022e0 <LoopCopyDataInit>

080022d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022de:	3104      	adds	r1, #4

080022e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022e8:	d3f6      	bcc.n	80022d8 <CopyDataInit>
  ldr  r2, =_sbss
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022ec:	e002      	b.n	80022f4 <LoopFillZerobss>

080022ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022f0:	f842 3b04 	str.w	r3, [r2], #4

080022f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022f8:	d3f9      	bcc.n	80022ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022fa:	f7ff ffb3 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fe:	f000 f811 	bl	8002324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002302:	f7ff feb5 	bl	8002070 <main>
  bx  lr    
 8002306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002308:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800230c:	080023b4 	.word	0x080023b4
  ldr  r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002314:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002318:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800231c:	20000078 	.word	0x20000078

08002320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC_IRQHandler>
	...

08002324 <__libc_init_array>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	4e0d      	ldr	r6, [pc, #52]	; (800235c <__libc_init_array+0x38>)
 8002328:	4c0d      	ldr	r4, [pc, #52]	; (8002360 <__libc_init_array+0x3c>)
 800232a:	1ba4      	subs	r4, r4, r6
 800232c:	10a4      	asrs	r4, r4, #2
 800232e:	2500      	movs	r5, #0
 8002330:	42a5      	cmp	r5, r4
 8002332:	d109      	bne.n	8002348 <__libc_init_array+0x24>
 8002334:	4e0b      	ldr	r6, [pc, #44]	; (8002364 <__libc_init_array+0x40>)
 8002336:	4c0c      	ldr	r4, [pc, #48]	; (8002368 <__libc_init_array+0x44>)
 8002338:	f000 f820 	bl	800237c <_init>
 800233c:	1ba4      	subs	r4, r4, r6
 800233e:	10a4      	asrs	r4, r4, #2
 8002340:	2500      	movs	r5, #0
 8002342:	42a5      	cmp	r5, r4
 8002344:	d105      	bne.n	8002352 <__libc_init_array+0x2e>
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800234c:	4798      	blx	r3
 800234e:	3501      	adds	r5, #1
 8002350:	e7ee      	b.n	8002330 <__libc_init_array+0xc>
 8002352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002356:	4798      	blx	r3
 8002358:	3501      	adds	r5, #1
 800235a:	e7f2      	b.n	8002342 <__libc_init_array+0x1e>
 800235c:	080023ac 	.word	0x080023ac
 8002360:	080023ac 	.word	0x080023ac
 8002364:	080023ac 	.word	0x080023ac
 8002368:	080023b0 	.word	0x080023b0

0800236c <memset>:
 800236c:	4402      	add	r2, r0
 800236e:	4603      	mov	r3, r0
 8002370:	4293      	cmp	r3, r2
 8002372:	d100      	bne.n	8002376 <memset+0xa>
 8002374:	4770      	bx	lr
 8002376:	f803 1b01 	strb.w	r1, [r3], #1
 800237a:	e7f9      	b.n	8002370 <memset+0x4>

0800237c <_init>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	bf00      	nop
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr

08002388 <_fini>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr
